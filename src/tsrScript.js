const minifiedTsrBootStrapScript = 'const __TSR_SSR__={matches:[],streamedValues:{},initMatch:l=>(__TSR_SSR__.matches.push(l),Object.entries(l.extracted).forEach(([o,r])=>{if(r.type==="stream"){let t;r.value=new ReadableStream({start(e){t={enqueue:a=>{try{e.enqueue(a)}catch{}},close:()=>{try{e.close()}catch{}}}}}),r.value.controller=t}else{let t,e;r.value=new Promise((a,n)=>{e=n,t=a}),r.value.reject=e,r.value.resolve=t}}),!0),resolvePromise:({matchId:l,id:o,promiseState:r})=>{const t=__TSR_SSR__.matches.find(e=>e.id===l);if(t){const e=t.extracted[o];if(e&&e.type==="promise"&&e.value&&r.status==="success")return e.value.resolve(r.data),!0}return!1},injectChunk:({matchId:l,id:o,chunk:r})=>{const t=__TSR_SSR__.matches.find(e=>e.id===l);if(t){const e=t.extracted[o];if(e&&e.type==="stream"&&e.value?.controller)return e.value.controller.enqueue(new TextEncoder().encode(r.toString())),!0}return!1},closeStream:({matchId:l,id:o})=>{const r=__TSR_SSR__.matches.find(t=>t.id===l);if(r){const t=r.extracted[o];if(t&&t.type==="stream"&&t.value?.controller)return t.value.controller.close(),!0}return!1},cleanScripts:()=>{document.querySelectorAll(".tsr-once").forEach(l=>{l.remove()})}};window.__TSR_SSR__=__TSR_SSR__;\n';
export {
  minifiedTsrBootStrapScript as default
};
//# sourceMappingURL=tsrScript.js.map
