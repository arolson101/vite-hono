/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as LazyComponentImport } from './routes/lazy-component'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin.index'
import { Route as AdminMembersImport } from './routes/admin.members'
import { Route as AdminMembersIndexImport } from './routes/admin.members.index'
import { Route as AdminMembersMemberIdImport } from './routes/admin.members.$memberId'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const LazyComponentRoute = LazyComponentImport.update({
  id: '/lazy-component',
  path: '/lazy-component',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminMembersRoute = AdminMembersImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => AdminRoute,
} as any)

const AdminMembersIndexRoute = AdminMembersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminMembersRoute,
} as any)

const AdminMembersMemberIdRoute = AdminMembersMemberIdImport.update({
  id: '/$memberId',
  path: '/$memberId',
  getParentRoute: () => AdminMembersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/lazy-component': {
      id: '/lazy-component'
      path: '/lazy-component'
      fullPath: '/lazy-component'
      preLoaderRoute: typeof LazyComponentImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/admin/members': {
      id: '/admin/members'
      path: '/members'
      fullPath: '/admin/members'
      preLoaderRoute: typeof AdminMembersImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/admin/members/$memberId': {
      id: '/admin/members/$memberId'
      path: '/$memberId'
      fullPath: '/admin/members/$memberId'
      preLoaderRoute: typeof AdminMembersMemberIdImport
      parentRoute: typeof AdminMembersImport
    }
    '/admin/members/': {
      id: '/admin/members/'
      path: '/'
      fullPath: '/admin/members/'
      preLoaderRoute: typeof AdminMembersIndexImport
      parentRoute: typeof AdminMembersImport
    }
  }
}

// Create and export the route tree

interface AdminMembersRouteChildren {
  AdminMembersMemberIdRoute: typeof AdminMembersMemberIdRoute
  AdminMembersIndexRoute: typeof AdminMembersIndexRoute
}

const AdminMembersRouteChildren: AdminMembersRouteChildren = {
  AdminMembersMemberIdRoute: AdminMembersMemberIdRoute,
  AdminMembersIndexRoute: AdminMembersIndexRoute,
}

const AdminMembersRouteWithChildren = AdminMembersRoute._addFileChildren(
  AdminMembersRouteChildren,
)

interface AdminRouteChildren {
  AdminMembersRoute: typeof AdminMembersRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminMembersRoute: AdminMembersRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/lazy-component': typeof LazyComponentRoute
  '/redirect': typeof RedirectRoute
  '/admin/members': typeof AdminMembersRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/members/$memberId': typeof AdminMembersMemberIdRoute
  '/admin/members/': typeof AdminMembersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lazy-component': typeof LazyComponentRoute
  '/redirect': typeof RedirectRoute
  '/admin': typeof AdminIndexRoute
  '/admin/members/$memberId': typeof AdminMembersMemberIdRoute
  '/admin/members': typeof AdminMembersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/lazy-component': typeof LazyComponentRoute
  '/redirect': typeof RedirectRoute
  '/admin/members': typeof AdminMembersRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/members/$memberId': typeof AdminMembersMemberIdRoute
  '/admin/members/': typeof AdminMembersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/lazy-component'
    | '/redirect'
    | '/admin/members'
    | '/admin/'
    | '/admin/members/$memberId'
    | '/admin/members/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lazy-component'
    | '/redirect'
    | '/admin'
    | '/admin/members/$memberId'
    | '/admin/members'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/lazy-component'
    | '/redirect'
    | '/admin/members'
    | '/admin/'
    | '/admin/members/$memberId'
    | '/admin/members/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LazyComponentRoute: typeof LazyComponentRoute
  RedirectRoute: typeof RedirectRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LazyComponentRoute: LazyComponentRoute,
  RedirectRoute: RedirectRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/lazy-component",
        "/redirect"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/members",
        "/admin/"
      ]
    },
    "/lazy-component": {
      "filePath": "lazy-component.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/admin/members": {
      "filePath": "admin.members.tsx",
      "parent": "/admin",
      "children": [
        "/admin/members/$memberId",
        "/admin/members/"
      ]
    },
    "/admin/": {
      "filePath": "admin.index.tsx",
      "parent": "/admin"
    },
    "/admin/members/$memberId": {
      "filePath": "admin.members.$memberId.tsx",
      "parent": "/admin/members"
    },
    "/admin/members/": {
      "filePath": "admin.members.index.tsx",
      "parent": "/admin/members"
    }
  }
}
ROUTE_MANIFEST_END */
