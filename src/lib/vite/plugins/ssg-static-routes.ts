import { AnyRouter } from '@tanstack/react-router'
import fs from 'node:fs/promises'
import type { Plugin } from 'vite'
import { createServer } from 'vite'
import tsconfigPaths from 'vite-tsconfig-paths'

type Options = {
  routerPath: string
  output: string
}

export const ssgStaticRoutes = (options: Options): Plugin => {
  const assets = new Map<string, string>()

  return {
    name: 'vite-plugin-ssg-static-routes',
    async config() {
      // Create a server to load the module
      const { routerPath } = options
      const server = await createServer({
        plugins: [tsconfigPaths()],
        configFile: false,
      })
      const module = await server.ssrLoadModule(routerPath)

      const createRouter = module['createRouter'] as () => AnyRouter

      if (!createRouter) {
        throw new Error(`Failed to find a named export "createRouter" from ${routerPath}`)
      }

      const router = createRouter()

      const routes = {} as Record<string, string>
      router.flatRoutes.forEach(flatRoute => {
        const fullPath = flatRoute.fullPath as string
        const nonStrictPath = fullPath.replace(/\/?$/, '') || '/'
        const reqPath = nonStrictPath.replaceAll('$', ':') // substitute tsr path param with hono path param
        const path = `${nonStrictPath}.html`.replaceAll('/.html', '/index.html')
        routes[reqPath] = path
      })

      const lines = [
        `// generated by vite-plugin-ssg-static-routes`,
        `export const staticRoutes = {`,
        ...Object.entries(routes).map(([reqPath, path]) => `  '${reqPath}': '${path}',`),
        `}`,
        ``,
      ]

      await fs.writeFile(options.output, lines.join('\n'))

      await server.close()
    },
  }
}

export default ssgStaticRoutes
