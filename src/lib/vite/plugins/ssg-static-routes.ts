import { AnyRouter } from '@tanstack/react-router'
import fs from 'node:fs/promises'
import type { Plugin } from 'vite'
import { createServer } from 'vite'
import tsconfigPaths from 'vite-tsconfig-paths'

type Options = {
  routerPath: string
  staticDir: string
  output: string
}

export const ssgStaticRoutes = (options: Options): Plugin => {
  const assets = new Map<string, string>()

  return {
    name: 'vite-plugin-ssg-static-routes',
    async config() {
      // Create a server to load the module
      {
        const { routerPath, staticDir } = options
        const server = await createServer({
          plugins: [tsconfigPaths()],
          configFile: false,
        })
        const module = await server.ssrLoadModule(routerPath)

        const createRouter = module['createRouter'] as () => AnyRouter

        if (!createRouter) {
          throw new Error(`Failed to find a named export "createRouter" from ${routerPath}`)
        }

        const router = createRouter()

        const lines = [
          `// generated by vite-plugin-ssg-static-routes`,
          `import { serveStatic } from '@hono/node-server/serve-static'`,
          `import { Hono } from 'hono'`,
          `import { compress } from 'hono/compress'`,
          ``,
          `const app = new Hono({ strict: false })`,
          `app.use(compress())`,
          ...router.flatRoutes
            // .filter(flatRoute => flatRoute.fullPath.includes('$'))
            .map(flatRoute => {
              const route = flatRoute.fullPath.replace(/\$/g, ':') // replace all $ with :
              const path = `${staticDir}${flatRoute.fullPath}/index.html`.replaceAll('//', '/')
              return `app.use('${route}', serveStatic({ path: '${path}' }))`
            }),
          ``,
          `export default app`,
          ``,
        ]

        await fs.writeFile(options.output, lines.join('\n'))
      }
    },
  }
}

export default ssgStaticRoutes
